name: Python Application CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-gui-operations:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: "@Mamdouh2"  # Match app.py's hardcoded password
          MYSQL_DATABASE: Library
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        command: >
          --default-authentication-plugin=mysql_native_password
          bash -c "while ! mysqladmin ping -hlocalhost --silent; do sleep 1; done;
          mysql -uroot -p@Mamdouh2 -e \"GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '@Mamdouh2'; FLUSH PRIVILEGES;\""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk xvfb

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Wait for MySQL to be ready
      run: |
        while ! mysqladmin ping -hlocalhost -uroot -p@Mamdouh2 --silent; do
          echo "Waiting for MySQL..."
          sleep 2
        done
        echo "MySQL is ready!"

    - name: Lint with pylint
      run: |
        pylint app.py --max-line-length=120 --fail-under=8

    - name: Run GUI tests with coverage
      env:
        TEST_MODE: "1"
      run: |
        xvfb-run --auto-servernum coverage run -m unittest test_gui_operations.py || (echo "GUI tests failed, printing logs..."; cat test_gui_operations.log; exit 1)
        coverage xml -o coverage_gui.xml
        coverage report --fail-under=50

    - name: Verify imports
      run: |
        python -c "import tkinter; print('Tkinter imported successfully')"
        python -c "import mysql.connector; print('MySQL Connector imported successfully')"

    - name: Upload GUI coverage report
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage_gui.xml
        fail_ci_if_error: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  test-db-operations:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: "@Mamdouh2"  # Match app.py's hardcoded password
          MYSQL_DATABASE: Library
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        command: >
          --default-authentication-plugin=mysql_native_password
          bash -c "while ! mysqladmin ping -hlocalhost --silent; do sleep 1; done;
          mysql -uroot -p@Mamdouh2 -e \"GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '@Mamdouh2'; FLUSH PRIVILEGES;\""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk xvfb

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Wait for MySQL to be ready
      run: |
        while ! mysqladmin ping -hlocalhost -uroot -p@Mamdouh2 --silent; do
          echo "Waiting for MySQL..."
          sleep 2
        done
        echo "MySQL is ready!"

    - name: Verify MySQL connectivity
      run: |
        python -c "import mysql.connector; conn = mysql.connector.connect(host='localhost', user='root', password='@Mamdouh2', database='Library'); print('MySQL connected successfully'); conn.close()"

    - name: Lint with pylint
      run: |
        pylint app.py --max-line-length=120 --fail-under=8

    - name: Run DB tests with coverage
      env:
        TEST_MODE: "1"
      run: |
        xvfb-run --auto-servernum coverage run -m unittest test_db_operations.py || (echo "DB tests failed, printing logs..."; cat test_db_operations.log; exit 1)
        coverage xml -o coverage_db.xml
        coverage report --fail-under=50

    - name: Verify imports
      run: |
        python -c "import tkinter; print('Tkinter imported successfully')"
        python -c "import mysql.connector; print('MySQL Connector imported successfully')"

    - name: Upload DB coverage report
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage_db.xml
        fail_ci_if_error: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}